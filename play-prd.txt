# Техническое описание раздела Play

## Общее описание
Раздел Play представляет собой интерактивную секцию приложения BetOnIt, где пользователи могут просматривать события и делать прогнозы (ставки) на их исходы, выбирая ответы "Да" (Yes) или "Нет" (No). Интерфейс выполнен в стиле "свайп-карточек", где пользователи могут просматривать события и взаимодействовать с ними с помощью вертикальных свайпов или навигационных кнопок.

## Архитектура и компоненты
Раздел Play состоит из следующих основных компонентов:

1. **Play Page (`app/[locale]/play/page.tsx`)** 
   - Основная страница раздела с аутентификацией пользователя
   - Содержит компонент PlayFeed для отображения ленты событий
   - Включает систему уведомлений Toaster для показа сообщений пользователю
   - Предотвращает доступ неавторизованным пользователям с редиректом на страницу входа

2. **PlayFeed (`components/play/PlayFeed.tsx`)**
   - Отвечает за загрузку и управление данными о событиях
   - Управляет навигацией между событиями (свайпы, кнопки)
   - Обрабатывает размещение ставок и обновление баланса пользователя
   - Отображает текущий баланс пользователя с помощью иконки монет
   - Содержит логику пагинации для загрузки дополнительных событий

3. **PlayEventCard (`components/play/PlayEventCard.tsx`)**
   - Отображает отдельное событие в виде карточки
   - Поддерживает различные типы медиа-контента (изображения, видео)
   - Показывает информацию о событии: заголовок, описание, дату закрытия ставок
   - Содержит кнопки "Yes" и "No" для размещения ставок
   - Адаптируется под различные состояния (уже сделана ставка, последнее событие)

4. **BetModal (`components/BetModal.tsx`)**
   - Модальное окно для размещения ставки
   - Позволяет выбрать сумму ставки из предустановленных значений или ввести произвольную
   - Показывает баланс пользователя
   - Проверяет достаточность средств для ставки
   - Обрабатывает подтверждение ставки и отображает состояние загрузки

5. **API Endpoints**
   - `/api/play/events` - для получения списка событий с пагинацией
   - `/api/bets/place` - для размещения ставок
   - `/api/users/balance` - для получения текущего баланса пользователя

6. **Вспомогательные компоненты и хуки**
   - `useMediaTypeDetection` - хук для определения типа медиа-контента
   - `LoadingSpinner` - компонент для отображения состояния загрузки

## Потоки данных и взаимодействие

1. **Загрузка пользовательских данных**
   - При входе в раздел Play проверяется авторизация пользователя
   - Неавторизованные пользователи перенаправляются на страницу входа
   - Для авторизованных загружается ID пользователя, который передается в PlayFeed

2. **Загрузка событий**
   - PlayFeed делает запрос к API `/api/play/events` для получения доступных событий
   - API возвращает список событий с пагинацией (по 10 на страницу)
   - Каждое событие содержит информацию о заголовке, описании, медиа-контенте и дате закрытия ставок
   - Также API указывает, делал ли пользователь ставку на конкретное событие

3. **Просмотр событий**
   - Пользователь может перемещаться между событиями с помощью:
     - Вертикальных свайпов (свайп вверх - следующее событие, свайп вниз - предыдущее)
     - Кнопок навигации внизу экрана
   - При достижении конца списка загружается следующая страница событий (если доступна)

4. **Размещение ставок**
   - Пользователь выбирает свой прогноз нажатием на кнопку "Yes" или "No"
   - Открывается модальное окно BetModal для выбора суммы ставки
   - После подтверждения делается запрос к API `/api/bets/place`
   - При успешном размещении ставки:
     - Обновляется баланс пользователя
     - Показывается уведомление об успешной ставке
     - Событие помечается как "уже сделана ставка"
     - Происходит автоматический переход к следующему событию

5. **Отображение баланса**
   - Текущий баланс пользователя запрашивается при загрузке PlayFeed
   - Баланс отображается в верхнем правом углу с иконкой монет
   - После каждой ставки баланс автоматически обновляется

## Технические особенности

1. **Локализация**
   - Все текстовые сообщения поддерживают многоязычность (английский и русский языки)
   - Используется система локализации на основе i18n-config с хуком useTranslation

2. **Обработка ошибок**
   - Реализовано отображение понятных пользователю сообщений об ошибках
   - Обрабатываются ошибки загрузки событий, размещения ставок, загрузки баланса
   - Показываются соответствующие уведомления с помощью toast

3. **Адаптивный интерфейс**
   - Интерфейс адаптируется под различные состояния:
     - Загрузка (отображение индикатора LoadingSpinner)
     - Пустой список событий
     - Ошибки
     - Различные типы медиа (изображения, видео)

4. **UI компоненты**
   - Кнопки ставок: "Yes" (зеленая) и "No" (фиолетовая) с иконками
   - Индикатор баланса с иконкой монет
   - Модальное окно для ставок с выбором суммы
   - Карточки событий с поддержкой различных типов медиа

## Особенности взаимодействия с пользователем

1. **Процесс ставки**
   - Пользователь видит карточку события с описанием и медиа-контентом
   - Заголовок "Your prediction" (Ваш выбор) указывает на возможность сделать ставку
   - Пользователь выбирает "Yes" или "No" в зависимости от своего прогноза
   - В модальном окне пользователь выбирает сумму ставки
   - После подтверждения и успешного размещения показывается уведомление об успехе

2. **Навигация между событиями**
   - Вертикальные свайпы для быстрой навигации
   - Кнопки "Вперед" и "Назад" для точной навигации
   - Автоматический переход к следующему событию после размещения ставки

3. **Состояния событий**
   - Обычное событие: отображаются кнопки "Yes" и "No"
   - Событие с уже сделанной ставкой: показывается сообщение "You already placed a bet"
   - Последнее событие: показывается сообщение "No more events to show"

4. **Ограничения**
   - Пользователь может делать только одну ставку на событие
   - Ставка не может превышать текущий баланс пользователя
   - Ставка должна быть положительным числом

## Технический стек

1. **Frontend**
   - Next.js (App Router с поддержкой локалей)
   - React с хуками (useState, useEffect, useRef)
   - Framer Motion для анимаций
   - Tailwind CSS для стилизации
   - Lucide React для иконок

2. **API**
   - Server Actions (Next.js)
   - Supabase для хранения данных и авторизации

3. **Безопасность**
   - Проверка аутентификации пользователя перед доступом к разделу
   - Валидация данных на стороне клиента и сервера
   - Защита от повторных ставок на одно событие

## Процесс разработки и масштабирование

Раздел Play был разработан с учетом возможности масштабирования:
- Компонентная архитектура позволяет легко добавлять новые функции
- Система локализации обеспечивает поддержку новых языков
- API с пагинацией эффективно работает с большим количеством событий
- Компоненты выделены и переиспользуемы для других частей приложения

Существующие ограничения и направления для улучшения:
- Оптимизация загрузки медиа-файлов для улучшения производительности
- Добавление дополнительных фильтров для событий
- Реализация дополнительной аналитики для пользовательских ставок